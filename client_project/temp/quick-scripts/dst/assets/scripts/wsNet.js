
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/wsNet.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f5f02ULtVhD47PNH08lZ5uR', 'wsNet');
// scripts/wsNet.js

"use strict";

/**
 * websocket 
 */
var Global = require("common"); //let Player = require("Player")


cc.Class({
  //extends: cc.Component,

  /*
  readyState:
      CONNECTING 0
      OPEN       1
      CLOSING    2
      CLOSED     3
  */
  CanSendMsg: function CanSendMsg() {
    if (Global.ws == null) {
      return false;
    }

    return Global.ws.readyState == WebSocket.CONNECTING || Global.ws.readyState == WebSocket.OPEN;
  },
  swConnect: function swConnect() {
    if (Global.ws != null) {
      return;
      cc.log("readyState: ", Global.ws.readyState);

      if (Global.ws.readyState == WebSocket.CONNECTING || Global.ws.readyState == WebSocket.OPEN) {
        //已经连上就不必再连
        return;
      }
    }

    cc.log("addr: ", Global.wsAddr, Global.ws == null);
    var ws = new WebSocket(Global.wsAddr);

    ws.onopen = function (e) {
      cc.log("ws open: ", ws.readyState);
    };

    ws.onmessage = function (e) {
      /**
       * 消息解析 
       * 0: 消息id
       * 1：消息长度
       * 2：sessionid
       * 3：nodex x坐标正负标记
       * 4：nodex x坐标值
       * 5：nodey y坐标正负标记
       * 6：nodey y坐标值 
       */
      var data = new Uint32Array(e.data);
      var msgid = data[0];

      switch (msgid) {
        case Global.MID_login:
          cc.log("ws message MID_login: ", data[1], data[2], data[3], data[4], data[5], data[6]);
          var key = data[2].toString();
          Global.PlayerMap.set(key, data[2]);
          break;

        case Global.MID_logout:
          var key = data[2].toString();
          cc.log("ws message MID_logout, sessionid: ", key);
          Global.PlayerMap["delete"](key);
          break;

        case Global.MID_move:
          cc.log("ws message MID_move: ", data[1], data[2], data[3], data[4], data[5], data[6]);
          var key = data[2].toString();
          Global.PlayerMap.set(key, data[2]);
          break;

        default:
          cc.log("未知 消息id: ", msgid);
      }
    };

    ws.onerror = function (e) {
      cc.log("ws error: ", ws.readyState);
      Global.ws = null;
    };

    ws.onclose = function (e) {
      cc.log("ws close: ", ws.readyState); //Player.sendPlayerPos()

      Global.ws = null;
    };

    cc.log("global ws init, state: ", ws.readyState);
    Global.ws = ws;
  },

  /**
   * 
   * @param {*} data  具体数据, 1：长度，2：是否广播，3：... 具体消息数据
   */
  sendwsmessage: function sendwsmessage(data) {
    if (Global.ws == null) {
      return;
    }

    if (Global.ws != null) {
      if (Global.ws.readyState == WebSocket.CLOSED || Global.ws.readyState == WebSocket.CLOSING) {
        //正在断开或者已经断开，则不能发送消息
        return;
      }
    }

    cc.log("ws sendwsmessage: ", Global.ws.readyState);
    Global.ws.send(data);
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcd3NOZXQuanMiXSwibmFtZXMiOlsiR2xvYmFsIiwicmVxdWlyZSIsImNjIiwiQ2xhc3MiLCJDYW5TZW5kTXNnIiwid3MiLCJyZWFkeVN0YXRlIiwiV2ViU29ja2V0IiwiQ09OTkVDVElORyIsIk9QRU4iLCJzd0Nvbm5lY3QiLCJsb2ciLCJ3c0FkZHIiLCJvbm9wZW4iLCJlIiwib25tZXNzYWdlIiwiZGF0YSIsIlVpbnQzMkFycmF5IiwibXNnaWQiLCJNSURfbG9naW4iLCJrZXkiLCJ0b1N0cmluZyIsIlBsYXllck1hcCIsInNldCIsIk1JRF9sb2dvdXQiLCJNSURfbW92ZSIsIm9uZXJyb3IiLCJvbmNsb3NlIiwic2VuZHdzbWVzc2FnZSIsIkNMT1NFRCIsIkNMT1NJTkciLCJzZW5kIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7QUFJQSxJQUFJQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQXBCLEVBQ0E7OztBQUVBQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMOztBQUVBOzs7Ozs7O0FBUUFDLEVBQUFBLFVBQVUsRUFBRSxzQkFBVTtBQUNsQixRQUFJSixNQUFNLENBQUNLLEVBQVAsSUFBYSxJQUFqQixFQUFzQjtBQUNsQixhQUFPLEtBQVA7QUFDSDs7QUFFRCxXQUFRTCxNQUFNLENBQUNLLEVBQVAsQ0FBVUMsVUFBVixJQUF3QkMsU0FBUyxDQUFDQyxVQUFsQyxJQUFnRFIsTUFBTSxDQUFDSyxFQUFQLENBQVVDLFVBQVYsSUFBd0JDLFNBQVMsQ0FBQ0UsSUFBMUY7QUFDSCxHQWpCSTtBQW1CTEMsRUFBQUEsU0FBUyxFQUFFLHFCQUFVO0FBQ2pCLFFBQUlWLE1BQU0sQ0FBQ0ssRUFBUCxJQUFhLElBQWpCLEVBQXVCO0FBQ25CO0FBQ0FILE1BQUFBLEVBQUUsQ0FBQ1MsR0FBSCxDQUFPLGNBQVAsRUFBdUJYLE1BQU0sQ0FBQ0ssRUFBUCxDQUFVQyxVQUFqQzs7QUFDQSxVQUFJTixNQUFNLENB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QUFBLEVBQUUsQ0FBQ3NCLE9BQUgsR0FBYSxVQUFVYixDQUFWLEVBQWE7QUFDdEJaLE1BQUFBLEVBQUUsQ0FBQ1MsR0FBSCxDQUFPLFlBQVAsRUFBcUJOLEVBQUUsQ0FBQ0MsVUFBeEIsRUFEc0IsQ0FFdEI7O0FBQ0FOLE1BQUFBLE1BQU0sQ0FBQ0ssRUFBUCxHQUFZLElBQVo7QUFDSCxLQUpEOztBQU1BSCxJQUFBQSxFQUFFLENBQUNTLEdBQUgsQ0FBTyx5QkFBUCxFQUFrQ04sRUFBRSxDQUFDQyxVQUFyQztBQUNBTixJQUFBQSxNQUFNLENBQUNLLEVBQVAsR0FBWUEsRUFBWjtBQUNILEdBakZJOztBQW1GTDs7OztBQUlBdUIsRUFBQUEsYUFBYSxFQUFFLHVCQUFTWixJQUFULEVBQWM7QUFFekIsUUFBSWhCLE1BQU0sQ0FBQ0ssRUFBUCxJQUFhLElBQWpCLEVBQXVCO0FBQ25CO0FBQ0g7O0FBRUQsUUFBSUwsTUFBTSxDQUFDSyxFQUFQLElBQWEsSUFBakIsRUFBdUI7QUFDbkIsVUFBSUwsTUFBTSxDQUFDSyxFQUFQLENBQVVDLFVBQVYsSUFBd0JDLFNBQVMsQ0FBQ3NCLE1BQWxDLElBQTRDN0IsTUFBTSxDQUFDSyxFQUFQLENBQVVDLFVBQVYsSUFBd0JDLFNBQVMsQ0FBQ3VCLE9BQWxGLEVBQTJGO0FBQUU7QUFDekY7QUFDSDtBQUNKOztBQUVENUIsSUFBQUEsRUFBRSxDQUFDUyxHQUFILENBQU8sb0JBQVAsRUFBNkJYLE1BQU0sQ0FBQ0ssRUFBUCxDQUFVQyxVQUF2QztBQUNBTixJQUFBQSxNQUFNLENBQUNLLEVBQVAsQ0FBVTBCLElBQVYsQ0FBZWYsSUFBZjtBQUNIO0FBckdJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiB3ZWJzb2NrZXQgXHJcbiAqL1xyXG5cclxubGV0IEdsb2JhbCA9IHJlcXVpcmUoXCJjb21tb25cIilcclxuLy9sZXQgUGxheWVyID0gcmVxdWlyZShcIlBsYXllclwiKVxyXG5cclxuY2MuQ2xhc3Moe1xyXG4gICAgLy9leHRlbmRzOiBjYy5Db21wb25lbnQsXHJcblxyXG4gICAgLypcclxuICAgIHJlYWR5U3RhdGU6XHJcbiAgICAgICAgQ09OTkVDVElORyAwXHJcbiAgICAgICAgT1BFTiAgICAgICAxXHJcbiAgICAgICAgQ0xPU0lORyAgICAyXHJcbiAgICAgICAgQ0xPU0VEICAgICAzXHJcbiAgICAqL1xyXG4gICBcclxuICAgIENhblNlbmRNc2c6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgaWYgKEdsb2JhbC53cyA9PSBudWxsKXtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKEdsb2JhbC53cy5yZWFkeVN0YXRlID09IFdlYlNvY2tldC5DT05ORUNUSU5HIHx8IEdsb2JhbC53cy5yZWFkeVN0YXRlID09IFdlYlNvY2tldC5PUEVOKVxyXG4gICAgfSwgIFxyXG5cclxuICAgIHN3Q29ubmVjdDogZnVuY3Rpb24oKXtcclxuICAgICAgICBpZiAoR2xvYmFsLndzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIGNjLmxvZyhcInJlYWR5U3RhdGU6IFwiLCBHbG9iYWwud3MucmVhZHlTdGF0ZSlcclxuICAgICAgICAgICAgaWYgKEdsb2JhbC53cy5yZWFkeVN0YXRlID09IFdlYlNvY2tldC5DT05ORUNUSU5HIHx8IEdsb2JhbC53cy5yZWFkeVN0YXRlID09IFdlYlNvY2tldC5PUEVOKSB7IC8v5bey57uP6L+e5LiK5bCx5LiN5b+F5YaN6L+eXHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2MubG9nKFwiYWRkcjogXCIsIEdsb2JhbC53c0FkZHIsIEdsb2JhbC53cyA9PSBudWxsKVxyXG4gICAgICAgIHZhciB3cyA9IG5ldyBXZWJTb2NrZXQoR2xvYmFsLndzQWRkcik7XHJcbiAgICAgICAgd3Mub25vcGVuID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBjYy5sb2coXCJ3cyBvcGVuOiBcIiwgd3MucmVhZHlTdGF0ZSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOa2iOaBr+ino+aekCBcclxuICAgICAgICAgICAgICogMDog5raI5oGvaWRcclxuICAgICAgICAgICAgICogMe+8mua2iOaBr+mVv+W6plxyXG4gICAgICAgICAgICAgKiAy77yac2Vzc2lvbmlkXHJcbiAgICAgICAgICAgICAqIDPvvJpub2RleCB45Z2Q5qCH5q2j6LSf5qCH6K6wXHJcbiAgICAgICAgICAgICAqIDTvvJpub2RleCB45Z2Q5qCH5YC8XHJcbiAgICAgICAgICAgICAqIDXvvJpub2RleSB55Z2Q5qCH5q2j6LSf5qCH6K6wXHJcbiAgICAgICAgICAgICAqIDbvvJpub2RleSB55Z2Q5qCH5YC8IFxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdmFyIGRhdGEgPSBuZXcgVWludDMyQXJyYXkoZS5kYXRhKVxyXG4gICAgICAgICAgICB2YXIgbXNnaWQgPSBkYXRhWzBdIFxyXG4gICAgICAgICAgICBzd2l0Y2ggKG1zZ2lkKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEdsb2JhbC5NSURfbG9naW46XHJcbiAgICAgICAgICAgICAgICAgICAgY2MubG9nKFwid3MgbWVzc2FnZSBNSURfbG9naW46IFwiLCBkYXRhWzFdLCBkYXRhWzJdLCBkYXRhWzNdLCBkYXRhWzRdLCBkYXRhWzVdLCBkYXRhWzZdKVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBkYXRhWzJdLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgICAgICAgICBHbG9iYWwuUGxheWVyTWFwLnNldChrZXksIGRhdGFbMl0pXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEdsb2JhbC5NSURfbG9nb3V0OlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBkYXRhWzJdLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgICAgICAgICBjYy5sb2coXCJ3cyBtZXNzYWdlIE1JRF9sb2dvdXQsIHNlc3Npb25pZDogXCIsIGtleSlcclxuICAgICAgICAgICAgICAgICAgICBHbG9iYWwuUGxheWVyTWFwLmRlbGV0ZShrZXkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEdsb2JhbC5NSURfbW92ZTpcclxuICAgICAgICAgICAgICAgICAgICBjYy5sb2coXCJ3cyBtZXNzYWdlIE1JRF9tb3ZlOiBcIiwgZGF0YVsxXSwgZGF0YVsyXSwgZGF0YVszXSwgZGF0YVs0XSwgZGF0YVs1XSwgZGF0YVs2XSlcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gZGF0YVsyXS50b1N0cmluZygpXHJcbiAgICAgICAgICAgICAgICAgICAgR2xvYmFsLlBsYXllck1hcC5zZXQoa2V5LCBkYXRhWzJdKVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBjYy5sb2coXCLmnKrnn6Ug5raI5oGvaWQ6IFwiLCBtc2dpZClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd3Mub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGNjLmxvZyhcIndzIGVycm9yOiBcIiwgd3MucmVhZHlTdGF0ZSlcclxuICAgICAgICAgICAgR2xvYmFsLndzID0gbnVsbFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd3Mub25jbG9zZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGNjLmxvZyhcIndzIGNsb3NlOiBcIiwgd3MucmVhZHlTdGF0ZSlcclxuICAgICAgICAgICAgLy9QbGF5ZXIuc2VuZFBsYXllclBvcygpXHJcbiAgICAgICAgICAgIEdsb2JhbC53cyA9IG51bGxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNjLmxvZyhcImdsb2JhbCB3cyBpbml0LCBzdGF0ZTogXCIsIHdzLnJlYWR5U3RhdGUpXHJcbiAgICAgICAgR2xvYmFsLndzID0gd3NcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSAg5YW35L2T5pWw5o2uLCAx77ya6ZW/5bqm77yMMu+8muaYr+WQpuW5v+aSre+8jDPvvJouLi4g5YW35L2T5raI5oGv5pWw5o2uXHJcbiAgICAgKi9cclxuICAgIHNlbmR3c21lc3NhZ2U6IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChHbG9iYWwud3MgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChHbG9iYWwud3MgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoR2xvYmFsLndzLnJlYWR5U3RhdGUgPT0gV2ViU29ja2V0LkNMT1NFRCB8fCBHbG9iYWwud3MucmVhZHlTdGF0ZSA9PSBXZWJTb2NrZXQuQ0xPU0lORykgeyAvL+ato+WcqOaWreW8gOaIluiAheW3sue7j+aWreW8gO+8jOWImeS4jeiDveWPkemAgea2iOaBr1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNjLmxvZyhcIndzIHNlbmR3c21lc3NhZ2U6IFwiLCBHbG9iYWwud3MucmVhZHlTdGF0ZSlcclxuICAgICAgICBHbG9iYWwud3Muc2VuZChkYXRhKVxyXG4gICAgfVxyXG59KSJdfQ==