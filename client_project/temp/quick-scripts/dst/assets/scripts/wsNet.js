
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/wsNet.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f5f02ULtVhD47PNH08lZ5uR', 'wsNet');
// scripts/wsNet.js

"use strict";

/**
 * websocket 
 */
var Global = require("common"); //心跳检测


var HeartCheck = {
  timeout: 50000,
  //50秒 稍微比服务器小一点，让服务器网络波动有个缓冲时间
  svrtimeout: 60000,
  //60秒
  timeoutObj: null,
  serverTimeoutObj: null,
  disconnectioned: false,
  reconnectTimeoutobj: null,
  reset: function reset() {
    clearTimeout(this.timeoutObj);
    clearTimeout(this.serverTimeoutObj);
    return this;
  },
  startHeartBeat: function startHeartBeat() {
    var self = this;
    this.timeoutObj = setTimeout(function () {
      //这里发送一个心跳，后端收到后，返回一个心跳消息，onmessage拿到返回的心跳就说明连接正常
      cc.log("send heart beat...");

      if (Global.ws == null) {
        return;
      }

      var buff = new ArrayBuffer(12);
      var data = new Uint32Array(buff);
      data[0] = Global.MID_HeartBeat; //消息ID

      data[1] = 1; //消息长度

      data[2] = 0; //anything 随意填充一个数

      Global.ws.send(data);
      self.serverTimeoutObj = setTimeout(function () {
        //心跳超时主动断开
        cc.log("close connection...");

        if (Global.ws == null) {
          return;
        }

        Global.ws.close(); //self.disconnectioned = true
      }, self.svrtimeout);
    }, this.timeout);
  },
  hasDisconnected: function hasDisconnected() {
    return this.disconnectioned;
  },
  stopReconnectTimer: function stopReconnectTimer() {
    //cc.log("close reconnectTimeout...")
    clearTimeout(this.reconnectTimeoutobj);
  }
};
/**
 * 消息回复处理
 */

var MessageStateFunc = {
  /**
   * 消息解析 
   * 0: 消息id
   * 1：消息长度
   * 2：sessionid
   * 3：nodex x坐标正负标记
   * 4：nodex x坐标值
   * 5：nodey y坐标正负标记
   * 6：nodey y坐标值 
   */
  onlogin: function onlogin(data) {
    if (data[2] == 1) {
      Global.mySessionId = data[3];
    } else {
      return;
    }

    cc.log("ws message MID_login: ", data[2], data[3], data[4], data[5], data[6], data[7], data[8]);
    Global.LoginSucc = data[2];
    var nodex = data[5];
    var nodey = data[7];

    if (data[4] == 2) {
      nodex = 0 - nodex;
    }

    if (data[6] == 2) {
      nodey = 0 - nodey;
    }

    Global.MosterPosX = nodex;
    Global.MosterPosY = nodey;
    Global.MonsterScore = data[8];
  },
  onlogout: function onlogout(data) {
    var key = data[2].toString();
    cc.log("ws message MID_logout, sessionid: ", key);
    Global.DelPlayerIds.push(key);
    Global.PlayerSessionMap["delete"](key);
  },
  onmove: function onmove(data) {
    cc.log("ws message MID_move: ", data[1], data[2], data[3], data[4], data[5], data[6]);
    var key = data[6].toString();
    var nodex = data[3];
    var nodey = data[5];

    if (data[2] == 2) {
      nodex = 0 - nodex;
    }

    if (data[4] == 2) {
      nodey = 0 - nodey;
    }

    var playerProp = {
      sessionId: data[6],
      nodex: nodex,
      nodey: nodey
    };

    if (Global.PlayerSessionMap.has(key) == false) {
      Global.PlayerSessionMap.set(key, playerProp);
    }

    Global.NewplayerMap.set(key, playerProp);
    Global.newPlayerIds.push(key); //cc.log("MID_move purple monsters: ", Global.newPlayerIds.length, key, Global.NewplayerMap.has(key))
  },
  onBump: function onBump(data) {
    /**
     *  0: 消息ID
        1：消息长度
        2: 成功失败标志 (失败则只需要前三个字段)
        3: 星星x坐标正负标志
        4: 星星x坐标
        5：星星y坐标正负标志
        6：星星y坐标
        */
    if (data[2] == 0) {
      //失败
      cc.log("ws message MID_Bump fail ... ");
      return;
    }

    cc.log("ws message MID_Bump: ", data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
    var nodex = data[4];
    var nodey = data[6];

    if (data[3] == 2) {
      nodex = 0 - nodex;
    }

    if (data[5] == 2) {
      nodey = 0 - nodey;
    }

    Global.BumpedPlayerId = data[7];
    var starProp = {
      nodex: nodex,
      nodey: nodey
    };
    Global.newStarPos.set(Global.newStarKey, starProp);
  },
  onHeartBeat: function onHeartBeat(data) {
    cc.log("ws message MID_HeartBeat...");
  },
  onStarBorn: function onStarBorn(data) {
    cc.log("ws message MID_StarBorn: ", data[2], data[3], data[4], data[5]);
    /**
     *  0: 消息ID
        1：消息长度
        2: 星星x坐标正负标志
        3: 星星x坐标
        4：星星y坐标正负标志
        5：星星y坐标
     */

    var nodex = data[3];
    var nodey = data[5];

    if (data[2] == 2) {
      nodex = 0 - nodex;
    }

    if (data[4] == 2) {
      nodey = 0 - nodey;
    }

    var starProp = {
      nodex: nodex,
      nodey: nodey
    };
    Global.newStarPos.set(Global.newStarKey, starProp);
  },
  onGM: function onGM(data) {
    cc.log("ws message MID_GM...");
  },
  Online4Other: function Online4Other(data) {
    cc.log("ws message MID_Online4Other: ", data[2], data[3], data[4], data[5], data[6]);
    var key = data[6].toString();
    var nodex = data[3];
    var nodey = data[5];

    if (data[2] == 2) {
      nodex = 0 - nodex;
    }

    if (data[4] == 2) {
      nodey = 0 - nodey;
    }

    cc.log("pos: ", nodex, nodey);
    var playerProp = {
      sessionId: data[6],
      nodex: nodex,
      nodey: nodey
    };

    if (Global.PlayerSessionMap.has(key) == false) {
      Global.PlayerSessionMap.set(key, playerProp);
    }

    Global.NewplayerMap.set(key, playerProp);
    Global.newPlayerIds.push(key);
    Global.syncOnline4Other = true;
  },
  onRegister: function onRegister(data) {
    cc.log("ws message MID_Register: ", data[2]);
    Global.RegisterSucc = data[2];
  },

  /**
   * 
   * @param {*} data only request, not response...
   */
  onSyncPos: function onSyncPos(data) {
    cc.log("ws message MID_SyncPos...");
  },
  onMonsterInfo: function onMonsterInfo(data) {
    cc.log("ws message MID_MonsterInfo: ", data[2], data[3]);
    Global.MonsterScore = data[3];
  }
};
cc.Class({
  //extends: cc.Component,

  /*
  readyState:
      CONNECTING 0
      OPEN       1
      CLOSING    2
      CLOSED     3
  */
  CanSendMsg: function CanSendMsg() {
    if (Global.ws == null) {
      return false;
    }

    return Global.ws.readyState == WebSocket.CONNECTING || Global.ws.readyState == WebSocket.OPEN;
  },
  swConnect: function swConnect() {
    if (Global.ws != null) {
      //return
      //cc.log("readyState: ", Global.ws.readyState)
      if (Global.ws.readyState == WebSocket.CONNECTING || Global.ws.readyState == WebSocket.OPEN) {
        //已经连上就不必再连
        return;
      }
    }

    var self = this;
    cc.log("addr: ", Global.wsAddr, Global.ws == null);
    var ws = new WebSocket(Global.wsAddr);

    ws.onopen = function (e) {
      cc.log("ws open: ", ws.readyState); //发送心跳

      HeartCheck.reset().startHeartBeat();
    };

    ws.onmessage = function (e) {
      var data = new Uint32Array(e.data);
      var msgid = data[0];

      switch (msgid) {
        case Global.MID_login:
          MessageStateFunc.onlogin(data);
          break;

        case Global.MID_logout:
          MessageStateFunc.onlogout(data);
          break;

        case Global.MID_move:
          MessageStateFunc.onmove(data);
          break;

        case Global.MID_Bump:
          MessageStateFunc.onBump(data);
          break;

        case Global.MID_HeartBeat:
          MessageStateFunc.onHeartBeat(data);
          break;

        case Global.MID_StarBorn:
          MessageStateFunc.onStarBorn(data);
          break;

        case Global.MID_GM:
          MessageStateFunc.onGM(data);
          break;

        case Global.MID_Online4Other:
          MessageStateFunc.Online4Other(data);
          break;

        case Global.MID_Register:
          MessageStateFunc.onRegister(data);
          break;

        case Global.MID_SyncPos:
          MessageStateFunc.onSyncPos(data);
          break;

        case Global.MID_MonsterInfo:
          MessageStateFunc.onMonsterInfo(data);
          break;

        default:
          cc.log("未知 消息id: ", msgid);
      } //发送心跳


      HeartCheck.reset().startHeartBeat();
    };

    ws.onerror = function (e) {
      cc.log("ws error: ", ws.readyState); //Global.ws = null

      if (HeartCheck.hasDisconnected() == false) {
        HeartCheck.stopReconnectTimer();
        HeartCheck.reconnectTimeoutobj = setTimeout(function () {
          self.swConnect();
        }, 1000);
      } else {
        HeartCheck.stopReconnectTimer();
      }
    };

    ws.onclose = function (e) {
      cc.log("ws close: ", ws.readyState); //Global.ws = null

      if (HeartCheck.hasDisconnected() == false) {
        HeartCheck.stopReconnectTimer();
        HeartCheck.reconnectTimeoutobj = setTimeout(function () {
          self.swConnect();
        }, 1000);
      } else {
        HeartCheck.stopReconnectTimer();
      }
    };

    cc.log("global ws init, state: ", ws.readyState);
    Global.ws = ws;
  },

  /**
   * 
   * @param {*} data  具体数据, 1：长度，2：是否广播，3：... 具体消息数据
   */
  sendwsmessage: function sendwsmessage(data) {
    if (Global.ws == null) {
      return;
    }

    if (Global.ws != null) {
      if (Global.ws.readyState == WebSocket.CLOSED || Global.ws.readyState == WebSocket.CLOSING) {
        //正在断开或者已经断开，则不能发送消息
        return;
      }
    } //cc.log("ws sendwsmessage: ", Global.ws.readyState)


    Global.ws.send(data);
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcd3NOZXQuanMiXSwibmFtZXMiOlsiR2xvYmFsIiwicmVxdWlyZSIsIkhlYXJ0Q2hlY2siLCJ0aW1lb3V0Iiwic3ZydGltZW91dCIsInRpbWVvdXRPYmoiLCJzZXJ2ZXJUaW1lb3V0T2JqIiwiZGlzY29ubmVjdGlvbmVkIiwicmVjb25uZWN0VGltZW91dG9iaiIsInJlc2V0IiwiY2xlYXJUaW1lb3V0Iiwic3RhcnRIZWFydEJlYXQiLCJzZWxmIiwic2V0VGltZW91dCIsImNjIiwibG9nIiwid3MiLCJidWZmIiwiQXJyYXlCdWZmZXIiLCJkYXRhIiwiVWludDMyQXJyYXkiLCJNSURfSGVhcnRCZWF0Iiwic2VuZCIsImNsb3NlIiwiaGFzRGlzY29ubmVjdGVkIiwic3RvcFJlY29ubmVjdFRpbWVyIiwiTWVzc2FnZVN0YXRlRnVuYyIsIm9ubG9naW4iLCJteVNlc3Npb25JZCIsIkxvZ2luU3VjYyIsIm5vZGV4Iiwibm9kZXkiLCJNb3N0ZXJQb3NYIiwiTW9zdGVyUG9zWSIsIk1vbnN0ZXJTY29yZSIsIm9ubG9nb3V0Iiwia2V5IiwidG9TdHJpbmciLCJEZWxQbGF5ZXJJZHMiLCJwdXNoIiwiUGxheWVyU2Vzc2lvbk1hcCIsIm9ubW92ZSIsInBsYXllclByb3AiLCJzZXNzaW9uSWQiLCJoYXMiLCJzZXQiLCJOZXdwbGF5ZXJNYXAiLCJuZXdQbGF5ZXJJZHMiLCJvbkJ1bXAiLCJCdW1wZWRQbGF5ZXJJZCIsInN0YXJQcm9wIiwibmV3U3RhclBvcyIsIm5ld1N0YXJLZXkiLCJvbkhlYXJ0QmVhdCIsIm9uU3RhckJvcm4iLCJvbkdNIiwiT25saW5lNE90aGVyIiwic3luY09ubGluZTRPdGhlciIsIm9uUmVnaXN0ZXIiLCJSZWdpc3RlclN1Y2MiLCJvblN5bmNQb3MiLCJvbk1vbnN0ZXJJbmZvIiwiQ2xhc3MiLCJDYW5TZW5kTXNnIiwicmVhZHlTdGF0ZSIsIldlYlNvY2tldCIsIkNPTk5FQ1RJTkciLCJPUEVOIiwic3dDb25uZWN0Iiwid3NBZGRyIiwib25vcGVuIiwiZSIsIm9ubWVzc2FnZSIsIm1zZ2lkIiwiTUlEX2xvZ2luIiwiTUlEX2xvZ291dCIsIk1JRF9tb3ZlIiwiTUlEX0J1bXAiLCJNSURfU3RhckJvcm4iLCJNSURfR00iLCJNSURfT25saW5lNE90aGVyIiwiTUlEX1JlZ2lzdGVyIiwiTUlEX1N5bmNQb3MiLCJNSURfTW9uc3RlckluZm8iLCJvbmVycm9yIiwib25jbG9zZSIsInNlbmR3c21lc3NhZ2UiLCJDTE9TRUQiLCJDTE9TSU5HIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7QUFJQSxJQUFJQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQXBCLEVBRUE7OztBQUNBLElBQUlDLFVBQVUsR0FBRztBQUNiQyxFQUFBQSxPQUFPLEVBQUUsS0FESTtBQUNHO0FBQ2hCQyxFQUFBQSxVQUFVLEVBQUUsS0FGQztBQUVNO0FBQ25CQyxFQUFBQSxVQUFVLEVBQUUsSUFIQztBQUliQyxFQUFBQSxnQkFBZ0IsRUFBRSxJQUpMO0FBS2JDLEVBQUFBLGVBQWUsRUFBRSxLQUxKO0FBTWJDLEVBQUFBLG1CQUFtQixFQUFFLElBTlI7QUFRYkMsRUFBQUEsS0FBSyxFQUFFLGlCQUFXO0FBQ2RDLElBQUFBLFlBQVksQ0FBQyxLQUFLTCxVQUFOLENBQVo7QUFDQUssSUFBQUEsWUFBWSxDQUFDLEtBQUtKLGdCQUFOLENBQVo7QUFDQSxXQUFPLElBQVA7QUFDSCxHQVpZO0FBY2JLLEVBQUFBLGNBQWMsRUFBRSwwQkFBVztBQUN2QixRQUFJQyxJQUFJLEdBQUcsSUFBWDtBQUNBLFNBQUtQLFVBQUwsR0FBa0JRLFVBQVUsQ0FBQyxZQUFXO0FBQ3BDO0FBQ0FDLE1BQUFBLEVBQUUsQ0FBQ0MsR0FBSCxDQUFPLG9CQUFQOztBQUNBLFVBQUlmLE1BQU0sQ0FBQ2dCLEVBQVAsSUFBYSxJQUFqQixFQUF1QjtBQUNuQjtBQUNIOztBQUVELFVBQUlDLElBQUksR0FBRyxJQUFJQyxXQUFKLENBQWdCLEVBQWhCLENBQVg7QUFDQSxV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LEVBRXhDLElBRndDLENBQTNDO0FBR0gsT0FMRCxNQUtLO0FBQ0RsRSxRQUFBQSxVQUFVLENBQUN1QixrQkFBWDtBQUNIO0FBQ0osS0FYRDs7QUFhQVgsSUFBQUEsRUFBRSxDQUFDQyxHQUFILENBQU8seUJBQVAsRUFBa0NDLEVBQUUsQ0FBQ2dELFVBQXJDO0FBQ0FoRSxJQUFBQSxNQUFNLENBQUNnQixFQUFQLEdBQVlBLEVBQVo7QUFDSCxHQTlHSTs7QUFnSEw7Ozs7QUFJQXNFLEVBQUFBLGFBQWEsRUFBRSx1QkFBU25FLElBQVQsRUFBYztBQUV6QixRQUFJbkIsTUFBTSxDQUFDZ0IsRUFBUCxJQUFhLElBQWpCLEVBQXVCO0FBQ25CO0FBQ0g7O0FBRUQsUUFBSWhCLE1BQU0sQ0FBQ2dCLEVBQVAsSUFBYSxJQUFqQixFQUF1QjtBQUNuQixVQUFJaEIsTUFBTSxDQUFDZ0IsRUFBUCxDQUFVZ0QsVUFBVixJQUF3QkMsU0FBUyxDQUFDc0IsTUFBbEMsSUFBNEN2RixNQUFNLENBQUNnQixFQUFQLENBQVVnRCxVQUFWLElBQXdCQyxTQUFTLENBQUN1QixPQUFsRixFQUEyRjtBQUFFO0FBQ3pGO0FBQ0g7QUFDSixLQVZ3QixDQVl6Qjs7O0FBQ0F4RixJQUFBQSxNQUFNLENBQUNnQixFQUFQLENBQVVNLElBQVYsQ0FBZUgsSUFBZjtBQUNIO0FBbElJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiB3ZWJzb2NrZXQgXHJcbiAqL1xyXG5cclxubGV0IEdsb2JhbCA9IHJlcXVpcmUoXCJjb21tb25cIilcclxuXHJcbi8v5b+D6Lez5qOA5rWLXHJcbnZhciBIZWFydENoZWNrID0ge1xyXG4gICAgdGltZW91dDogNTAwMDAsIC8vNTDnp5Ig56iN5b6u5q+U5pyN5Yqh5Zmo5bCP5LiA54K577yM6K6p5pyN5Yqh5Zmo572R57uc5rOi5Yqo5pyJ5Liq57yT5Yay5pe26Ze0XHJcbiAgICBzdnJ0aW1lb3V0OiA2MDAwMCwgLy82MOenklxyXG4gICAgdGltZW91dE9iajogbnVsbCxcclxuICAgIHNlcnZlclRpbWVvdXRPYmo6IG51bGwsXHJcbiAgICBkaXNjb25uZWN0aW9uZWQ6IGZhbHNlLFxyXG4gICAgcmVjb25uZWN0VGltZW91dG9iajogbnVsbCxcclxuXHJcbiAgICByZXNldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dE9iaik7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc2VydmVyVGltZW91dE9iaik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG5cclxuICAgIHN0YXJ0SGVhcnRCZWF0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy50aW1lb3V0T2JqID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy/ov5nph4zlj5HpgIHkuIDkuKrlv4Pot7PvvIzlkI7nq6/mlLbliLDlkI7vvIzov5Tlm57kuIDkuKrlv4Pot7Pmtojmga/vvIxvbm1lc3NhZ2Xmi7/liLDov5Tlm57nmoTlv4Pot7PlsLHor7TmmI7ov57mjqXmraPluLhcclxuICAgICAgICAgICAgY2MubG9nKFwic2VuZCBoZWFydCBiZWF0Li4uXCIpXHJcbiAgICAgICAgICAgIGlmIChHbG9iYWwud3MgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH0gXHJcblxyXG4gICAgICAgICAgICB2YXIgYnVmZiA9IG5ldyBBcnJheUJ1ZmZlcigxMilcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSBuZXcgVWludDMyQXJyYXkoYnVmZilcclxuICAgIFxyXG4gICAgICAgICAgICBkYXRhWzBdID0gR2xvYmFsLk1JRF9IZWFydEJlYXQgLy/mtojmga9JRFxyXG4gICAgICAgICAgICBkYXRhWzFdID0gMSAvL+a2iOaBr+mVv+W6plxyXG4gICAgICAgICAgICBkYXRhWzJdID0gMCAvL2FueXRoaW5nIOmaj+aEj+Whq+WFheS4gOS4quaVsFxyXG5cclxuICAgICAgICAgICAgR2xvYmFsLndzLnNlbmQoZGF0YSk7XHJcbiAgICAgICAgICAgIHNlbGYuc2VydmVyVGltZW91dE9iaiA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IC8v5b+D6Lez6LaF5pe25Li75Yqo5pat5byAXHJcbiAgICAgICAgICAgICAgICBjYy5sb2coXCJjbG9zZSBjb25uZWN0aW9uLi4uXCIpXHJcbiAgICAgICAgICAgICAgICBpZiAoR2xvYmFsLndzID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgICAgICBHbG9iYWwud3MuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIC8vc2VsZi5kaXNjb25uZWN0aW9uZWQgPSB0cnVlXHJcbiAgICAgICAgICAgIH0sIHNlbGYuc3ZydGltZW91dClcclxuICAgICAgICB9LCB0aGlzLnRpbWVvdXQpXHJcbiAgICB9LFxyXG5cclxuICAgIGhhc0Rpc2Nvbm5lY3RlZDogZnVuY3Rpb24oKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5kaXNjb25uZWN0aW9uZWRcclxuICAgIH0sXHJcblxyXG4gICAgc3RvcFJlY29ubmVjdFRpbWVyOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIC8vY2MubG9nKFwiY2xvc2UgcmVjb25uZWN0VGltZW91dC4uLlwiKVxyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnJlY29ubmVjdFRpbWVvdXRvYmopO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICog5raI5oGv5Zue5aSN5aSE55CGXHJcbiAqL1xyXG52YXIgTWVzc2FnZVN0YXRlRnVuYyA9IHtcclxuICAgIC8qKlxyXG4gICAgICog5raI5oGv6Kej5p6QIFxyXG4gICAgICogMDog5raI5oGvaWRcclxuICAgICAqIDHvvJrmtojmga/plb/luqZcclxuICAgICAqIDLvvJpzZXNzaW9uaWRcclxuICAgICAqIDPvvJpub2RleCB45Z2Q5qCH5q2j6LSf5qCH6K6wXHJcbiAgICAgKiA077yabm9kZXggeOWdkOagh+WAvFxyXG4gICAgICogNe+8mm5vZGV5IHnlnZDmoIfmraPotJ/moIforrBcclxuICAgICAqIDbvvJpub2RleSB55Z2Q5qCH5YC8IFxyXG4gICAgICovXHJcbiAgICBvbmxvZ2luOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGRhdGFbMl0gPT0gMSkge1xyXG4gICAgICAgICAgICBHbG9iYWwubXlTZXNzaW9uSWQgPSBkYXRhWzNdXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2MubG9nKFwid3MgbWVzc2FnZSBNSURfbG9naW46IFwiLCBkYXRhWzJdLCBkYXRhWzNdLCBkYXRhWzRdLCBkYXRhWzVdLCBkYXRhWzZdLCBkYXRhWzddLCBkYXRhWzhdKVxyXG4gICAgICAgIEdsb2JhbC5Mb2dpblN1Y2MgPSBkYXRhWzJdXHJcbiAgICAgICAgdmFyIG5vZGV4ID0gZGF0YVs1XVxyXG4gICAgICAgIHZhciBub2RleSA9IGRhdGFbN11cclxuICAgICAgICBpZiAoZGF0YVs0XSA9PSAyKXtcclxuICAgICAgICAgICAgbm9kZXggPSAwIC0gbm9kZXhcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRhdGFbNl0gPT0gMil7XHJcbiAgICAgICAgICAgIG5vZGV5ID0gMCAtIG5vZGV5XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEdsb2JhbC5Nb3N0ZXJQb3NYID0gbm9kZXhcclxuICAgICAgICBHbG9iYWwuTW9zdGVyUG9zWSA9IG5vZGV5XHJcbiAgICAgICAgR2xvYmFsLk1vbnN0ZXJTY29yZSA9IGRhdGFbOF1cclxuICAgIH0sXHJcblxyXG4gICAgb25sb2dvdXQ6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICB2YXIga2V5ID0gZGF0YVsyXS50b1N0cmluZygpXHJcbiAgICAgICAgY2MubG9nKFwid3MgbWVzc2FnZSBNSURfbG9nb3V0LCBzZXNzaW9uaWQ6IFwiLCBrZXkpXHJcbiAgICAgICAgR2xvYmFsLkRlbFBsYXllcklkcy5wdXNoKGtleSlcclxuICAgICAgICBHbG9iYWwuUGxheWVyU2Vzc2lvbk1hcC5kZWxldGUoa2V5KVxyXG4gICAgfSxcclxuXHJcbiAgICBvbm1vdmU6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICBjYy5sb2coXCJ3cyBtZXNzYWdlIE1JRF9tb3ZlOiBcIiwgZGF0YVsxXSwgZGF0YVsyXSwgZGF0YVszXSwgZGF0YVs0XSwgZGF0YVs1XSwgZGF0YVs2XSlcclxuICAgICAgICB2YXIga2V5ID0gZGF0YVs2XS50b1N0cmluZygpXHJcbiAgICAgICAgdmFyIG5vZGV4ID0gZGF0YVszXVxyXG4gICAgICAgIHZhciBub2RleSA9IGRhdGFbNV1cclxuICAgICAgICBpZiAoZGF0YVsyXSA9PSAyKXtcclxuICAgICAgICAgICAgbm9kZXggPSAwIC0gbm9kZXhcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRhdGFbNF0gPT0gMil7XHJcbiAgICAgICAgICAgIG5vZGV5ID0gMCAtIG5vZGV5XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBwbGF5ZXJQcm9wID0ge1xyXG4gICAgICAgICAgICBzZXNzaW9uSWQ6IGRhdGFbNl0sXHJcbiAgICAgICAgICAgIG5vZGV4OiBub2RleCxcclxuICAgICAgICAgICAgbm9kZXk6IG5vZGV5XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChHbG9iYWwuUGxheWVyU2Vzc2lvbk1hcC5oYXMoa2V5KSA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBHbG9iYWwuUGxheWVyU2Vzc2lvbk1hcC5zZXQoa2V5LCBwbGF5ZXJQcm9wKVxyXG4gICAgICAgIH1cclxuICAgICAgICBHbG9iYWwuTmV3cGxheWVyTWFwLnNldChrZXksIHBsYXllclByb3ApXHJcbiAgICAgICAgR2xvYmFsLm5ld1BsYXllcklkcy5wdXNoKGtleSlcclxuICAgICAgICAvL2NjLmxvZyhcIk1JRF9tb3ZlIHB1cnBsZSBtb25zdGVyczogXCIsIEdsb2JhbC5uZXdQbGF5ZXJJZHMubGVuZ3RoLCBrZXksIEdsb2JhbC5OZXdwbGF5ZXJNYXAuaGFzKGtleSkpXHJcbiAgICB9LFxyXG5cclxuICAgIG9uQnVtcDogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAgMDog5raI5oGvSURcclxuICAgICAgICAgICAgMe+8mua2iOaBr+mVv+W6plxyXG4gICAgICAgICAgICAyOiDmiJDlip/lpLHotKXmoIflv5cgKOWksei0peWImeWPqumcgOimgeWJjeS4ieS4quWtl+autSlcclxuICAgICAgICAgICAgMzog5pif5pifeOWdkOagh+ato+i0n+agh+W/l1xyXG4gICAgICAgICAgICA0OiDmmJ/mmJ945Z2Q5qCHXHJcbiAgICAgICAgICAgIDXvvJrmmJ/mmJ955Z2Q5qCH5q2j6LSf5qCH5b+XXHJcbiAgICAgICAgICAgIDbvvJrmmJ/mmJ955Z2Q5qCHXHJcbiAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgIGlmIChkYXRhWzJdID09IDApeyAvL+Wksei0pVxyXG4gICAgICAgICAgICBjYy5sb2coXCJ3cyBtZXNzYWdlIE1JRF9CdW1wIGZhaWwgLi4uIFwiKVxyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY2MubG9nKFwid3MgbWVzc2FnZSBNSURfQnVtcDogXCIsIGRhdGFbMV0sIGRhdGFbMl0sIGRhdGFbM10sIGRhdGFbNF0sIGRhdGFbNV0sIGRhdGFbNl0sIGRhdGFbN10pXHJcblxyXG4gICAgICAgIHZhciBub2RleCA9IGRhdGFbNF1cclxuICAgICAgICB2YXIgbm9kZXkgPSBkYXRhWzZdXHJcbiAgICAgICAgaWYgKGRhdGFbM10gPT0gMil7XHJcbiAgICAgICAgICAgIG5vZGV4ID0gMCAtIG5vZGV4XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkYXRhWzVdID09IDIpe1xyXG4gICAgICAgICAgICBub2RleSA9IDAgLSBub2RleVxyXG4gICAgICAgIH1cclxuICAgICAgICBHbG9iYWwuQnVtcGVkUGxheWVySWQgPSBkYXRhWzddXHJcbiAgICAgICAgdmFyIHN0YXJQcm9wID0ge1xyXG4gICAgICAgICAgICBub2RleDogbm9kZXgsXHJcbiAgICAgICAgICAgIG5vZGV5OiBub2RleVxyXG4gICAgICAgIH1cclxuICAgICAgICBHbG9iYWwubmV3U3RhclBvcy5zZXQoR2xvYmFsLm5ld1N0YXJLZXksIHN0YXJQcm9wKVxyXG4gICAgfSxcclxuXHJcbiAgICBvbkhlYXJ0QmVhdDogZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgY2MubG9nKFwid3MgbWVzc2FnZSBNSURfSGVhcnRCZWF0Li4uXCIpXHJcbiAgICB9LFxyXG5cclxuICAgIG9uU3RhckJvcm46IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICBjYy5sb2coXCJ3cyBtZXNzYWdlIE1JRF9TdGFyQm9ybjogXCIsIGRhdGFbMl0sIGRhdGFbM10sIGRhdGFbNF0sIGRhdGFbNV0pXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIDA6IOa2iOaBr0lEXHJcbiAgICAgICAgICAgIDHvvJrmtojmga/plb/luqZcclxuICAgICAgICAgICAgMjog5pif5pifeOWdkOagh+ato+i0n+agh+W/l1xyXG4gICAgICAgICAgICAzOiDmmJ/mmJ945Z2Q5qCHXHJcbiAgICAgICAgICAgIDTvvJrmmJ/mmJ955Z2Q5qCH5q2j6LSf5qCH5b+XXHJcbiAgICAgICAgICAgIDXvvJrmmJ/mmJ955Z2Q5qCHXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyIG5vZGV4ID0gZGF0YVszXVxyXG4gICAgICAgIHZhciBub2RleSA9IGRhdGFbNV1cclxuICAgICAgICBpZiAoZGF0YVsyXSA9PSAyKXtcclxuICAgICAgICAgICAgbm9kZXggPSAwIC0gbm9kZXhcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRhdGFbNF0gPT0gMil7XHJcbiAgICAgICAgICAgIG5vZGV5ID0gMCAtIG5vZGV5XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzdGFyUHJvcCA9IHtcclxuICAgICAgICAgICAgbm9kZXg6IG5vZGV4LFxyXG4gICAgICAgICAgICBub2RleTogbm9kZXlcclxuICAgICAgICB9XHJcbiAgICAgICAgR2xvYmFsLm5ld1N0YXJQb3Muc2V0KEdsb2JhbC5uZXdTdGFyS2V5LCBzdGFyUHJvcClcclxuICAgIH0sXHJcblxyXG4gICAgb25HTTogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgIGNjLmxvZyhcIndzIG1lc3NhZ2UgTUlEX0dNLi4uXCIpXHJcbiAgICB9LFxyXG5cclxuICAgIE9ubGluZTRPdGhlcjogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgIGNjLmxvZyhcIndzIG1lc3NhZ2UgTUlEX09ubGluZTRPdGhlcjogXCIsIGRhdGFbMl0sIGRhdGFbM10sIGRhdGFbNF0sIGRhdGFbNV0sIGRhdGFbNl0pXHJcbiAgICAgICAgdmFyIGtleSA9IGRhdGFbNl0udG9TdHJpbmcoKVxyXG4gICAgICAgIHZhciBub2RleCA9IGRhdGFbM11cclxuICAgICAgICB2YXIgbm9kZXkgPSBkYXRhWzVdXHJcbiAgICAgICAgaWYgKGRhdGFbMl0gPT0gMil7XHJcbiAgICAgICAgICAgIG5vZGV4ID0gMCAtIG5vZGV4XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkYXRhWzRdID09IDIpe1xyXG4gICAgICAgICAgICBub2RleSA9IDAgLSBub2RleVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2MubG9nKFwicG9zOiBcIiwgbm9kZXgsIG5vZGV5KVxyXG4gICAgICAgIHZhciBwbGF5ZXJQcm9wID0ge1xyXG4gICAgICAgICAgICBzZXNzaW9uSWQ6IGRhdGFbNl0sXHJcbiAgICAgICAgICAgIG5vZGV4OiBub2RleCxcclxuICAgICAgICAgICAgbm9kZXk6IG5vZGV5XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChHbG9iYWwuUGxheWVyU2Vzc2lvbk1hcC5oYXMoa2V5KSA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBHbG9iYWwuUGxheWVyU2Vzc2lvbk1hcC5zZXQoa2V5LCBwbGF5ZXJQcm9wKVxyXG4gICAgICAgIH1cclxuICAgICAgICBHbG9iYWwuTmV3cGxheWVyTWFwLnNldChrZXksIHBsYXllclByb3ApXHJcbiAgICAgICAgR2xvYmFsLm5ld1BsYXllcklkcy5wdXNoKGtleSlcclxuICAgICAgICBHbG9iYWwuc3luY09ubGluZTRPdGhlciA9IHRydWVcclxuICAgIH0sXHJcblxyXG4gICAgb25SZWdpc3RlcjogZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgY2MubG9nKFwid3MgbWVzc2FnZSBNSURfUmVnaXN0ZXI6IFwiLCBkYXRhWzJdKVxyXG4gICAgICAgIEdsb2JhbC5SZWdpc3RlclN1Y2MgPSBkYXRhWzJdXHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgb25seSByZXF1ZXN0LCBub3QgcmVzcG9uc2UuLi5cclxuICAgICAqL1xyXG4gICAgb25TeW5jUG9zOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgY2MubG9nKFwid3MgbWVzc2FnZSBNSURfU3luY1Bvcy4uLlwiKVxyXG4gICAgfSxcclxuXHJcbiAgICBvbk1vbnN0ZXJJbmZvOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgY2MubG9nKFwid3MgbWVzc2FnZSBNSURfTW9uc3RlckluZm86IFwiLCBkYXRhWzJdLCBkYXRhWzNdKVxyXG4gICAgICAgIEdsb2JhbC5Nb25zdGVyU2NvcmUgPSBkYXRhWzNdXHJcbiAgICB9XHJcbn1cclxuXHJcbmNjLkNsYXNzKHtcclxuICAgIC8vZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG5cclxuICAgIC8qXHJcbiAgICByZWFkeVN0YXRlOlxyXG4gICAgICAgIENPTk5FQ1RJTkcgMFxyXG4gICAgICAgIE9QRU4gICAgICAgMVxyXG4gICAgICAgIENMT1NJTkcgICAgMlxyXG4gICAgICAgIENMT1NFRCAgICAgM1xyXG4gICAgKi9cclxuICAgXHJcbiAgICBDYW5TZW5kTXNnOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIGlmIChHbG9iYWwud3MgPT0gbnVsbCl7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChHbG9iYWwud3MucmVhZHlTdGF0ZSA9PSBXZWJTb2NrZXQuQ09OTkVDVElORyB8fCBHbG9iYWwud3MucmVhZHlTdGF0ZSA9PSBXZWJTb2NrZXQuT1BFTilcclxuICAgIH0sIFxyXG5cclxuICAgIHN3Q29ubmVjdDogZnVuY3Rpb24oKXtcclxuICAgICAgICBpZiAoR2xvYmFsLndzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgLy9yZXR1cm5cclxuICAgICAgICAgICAgLy9jYy5sb2coXCJyZWFkeVN0YXRlOiBcIiwgR2xvYmFsLndzLnJlYWR5U3RhdGUpXHJcbiAgICAgICAgICAgIGlmIChHbG9iYWwud3MucmVhZHlTdGF0ZSA9PSBXZWJTb2NrZXQuQ09OTkVDVElORyB8fCBHbG9iYWwud3MucmVhZHlTdGF0ZSA9PSBXZWJTb2NrZXQuT1BFTikgeyAvL+W3sue7j+i/nuS4iuWwseS4jeW/heWGjei/nlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBjYy5sb2coXCJhZGRyOiBcIiwgR2xvYmFsLndzQWRkciwgR2xvYmFsLndzID09IG51bGwpXHJcbiAgICAgICAgdmFyIHdzID0gbmV3IFdlYlNvY2tldChHbG9iYWwud3NBZGRyKTtcclxuICAgICAgICB3cy5vbm9wZW4gPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGNjLmxvZyhcIndzIG9wZW46IFwiLCB3cy5yZWFkeVN0YXRlKVxyXG4gICAgICAgICAgICAvL+WPkemAgeW/g+i3s1xyXG4gICAgICAgICAgICBIZWFydENoZWNrLnJlc2V0KCkuc3RhcnRIZWFydEJlYXQoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd3Mub25tZXNzYWdlID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IG5ldyBVaW50MzJBcnJheShlLmRhdGEpXHJcbiAgICAgICAgICAgIHZhciBtc2dpZCA9IGRhdGFbMF0gXHJcbiAgICAgICAgICAgIHN3aXRjaCAobXNnaWQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgR2xvYmFsLk1JRF9sb2dpbjpcclxuICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU3RhdGVGdW5jLm9ubG9naW4oZGF0YSlcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgR2xvYmFsLk1JRF9sb2dvdXQ6XHJcbiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVN0YXRlRnVuYy5vbmxvZ291dChkYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBHbG9iYWwuTUlEX21vdmU6XHJcbiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVN0YXRlRnVuYy5vbm1vdmUoZGF0YSlcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgR2xvYmFsLk1JRF9CdW1wOlxyXG4gICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTdGF0ZUZ1bmMub25CdW1wKGRhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgR2xvYmFsLk1JRF9IZWFydEJlYXQ6XHJcbiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVN0YXRlRnVuYy5vbkhlYXJ0QmVhdChkYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlIEdsb2JhbC5NSURfU3RhckJvcm46XHJcbiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVN0YXRlRnVuYy5vblN0YXJCb3JuKGRhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgR2xvYmFsLk1JRF9HTTpcclxuICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU3RhdGVGdW5jLm9uR00oZGF0YSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSBHbG9iYWwuTUlEX09ubGluZTRPdGhlcjpcclxuICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU3RhdGVGdW5jLk9ubGluZTRPdGhlcihkYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlIEdsb2JhbC5NSURfUmVnaXN0ZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVN0YXRlRnVuYy5vblJlZ2lzdGVyKGRhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgR2xvYmFsLk1JRF9TeW5jUG9zOlxyXG4gICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTdGF0ZUZ1bmMub25TeW5jUG9zKGRhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgR2xvYmFsLk1JRF9Nb25zdGVySW5mbzpcclxuICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU3RhdGVGdW5jLm9uTW9uc3RlckluZm8oZGF0YSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBjYy5sb2coXCLmnKrnn6Ug5raI5oGvaWQ6IFwiLCBtc2dpZClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy/lj5HpgIHlv4Pot7NcclxuICAgICAgICAgICAgSGVhcnRDaGVjay5yZXNldCgpLnN0YXJ0SGVhcnRCZWF0KClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdzLm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBjYy5sb2coXCJ3cyBlcnJvcjogXCIsIHdzLnJlYWR5U3RhdGUpXHJcbiAgICAgICAgICAgIC8vR2xvYmFsLndzID0gbnVsbFxyXG4gICAgICAgICAgICBpZiAoSGVhcnRDaGVjay5oYXNEaXNjb25uZWN0ZWQoKSA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgSGVhcnRDaGVjay5zdG9wUmVjb25uZWN0VGltZXIoKVxyXG4gICAgICAgICAgICAgICAgSGVhcnRDaGVjay5yZWNvbm5lY3RUaW1lb3V0b2JqID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnN3Q29ubmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgfSwgMTAwMClcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBIZWFydENoZWNrLnN0b3BSZWNvbm5lY3RUaW1lcigpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdzLm9uY2xvc2UgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBjYy5sb2coXCJ3cyBjbG9zZTogXCIsIHdzLnJlYWR5U3RhdGUpXHJcbiAgICAgICAgICAgIC8vR2xvYmFsLndzID0gbnVsbFxyXG4gICAgICAgICAgICBpZiAoSGVhcnRDaGVjay5oYXNEaXNjb25uZWN0ZWQoKSA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgSGVhcnRDaGVjay5zdG9wUmVjb25uZWN0VGltZXIoKVxyXG4gICAgICAgICAgICAgICAgSGVhcnRDaGVjay5yZWNvbm5lY3RUaW1lb3V0b2JqID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnN3Q29ubmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgfSwgMTAwMClcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBIZWFydENoZWNrLnN0b3BSZWNvbm5lY3RUaW1lcigpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNjLmxvZyhcImdsb2JhbCB3cyBpbml0LCBzdGF0ZTogXCIsIHdzLnJlYWR5U3RhdGUpXHJcbiAgICAgICAgR2xvYmFsLndzID0gd3NcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSAg5YW35L2T5pWw5o2uLCAx77ya6ZW/5bqm77yMMu+8muaYr+WQpuW5v+aSre+8jDPvvJouLi4g5YW35L2T5raI5oGv5pWw5o2uXHJcbiAgICAgKi9cclxuICAgIHNlbmR3c21lc3NhZ2U6IGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChHbG9iYWwud3MgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChHbG9iYWwud3MgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoR2xvYmFsLndzLnJlYWR5U3RhdGUgPT0gV2ViU29ja2V0LkNMT1NFRCB8fCBHbG9iYWwud3MucmVhZHlTdGF0ZSA9PSBXZWJTb2NrZXQuQ0xPU0lORykgeyAvL+ato+WcqOaWreW8gOaIluiAheW3sue7j+aWreW8gO+8jOWImeS4jeiDveWPkemAgea2iOaBr1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vY2MubG9nKFwid3Mgc2VuZHdzbWVzc2FnZTogXCIsIEdsb2JhbC53cy5yZWFkeVN0YXRlKVxyXG4gICAgICAgIEdsb2JhbC53cy5zZW5kKGRhdGEpXHJcbiAgICB9XHJcbn0pIl19