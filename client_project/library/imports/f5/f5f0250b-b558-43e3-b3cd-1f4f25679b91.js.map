{"version":3,"sources":["assets\\scripts\\wsNet.js"],"names":["Global","require","HeartCheck","timeout","timeoutObj","serverTimeoutObj","disconnectioned","reconnectTimeoutobj","state","reset","clearTimeout","startHeartBeat","self","setTimeout","cc","log","ws","buff","ArrayBuffer","data","Uint32Array","MID_HeartBeat","send","close","startCheckStopHeartBeat","hasDisconnected","stopReconnectTimer","Class","CanSendMsg","readyState","WebSocket","CONNECTING","OPEN","swConnect","wsAddr","onopen","e","onmessage","msgid","MID_login","key","toString","nodex","nodey","playerProp","sessionId","PlayerSessionMap","has","set","NewplayerMap","newPlayerIds","push","MID_logout","DelPlayerIds","MID_move","length","MID_Bump","starProp","newStarPos","newStarKey","onerror","onclose","sendwsmessage","CLOSED","CLOSING"],"mappings":"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","sourceRoot":"/","sourcesContent":["/**\r\n * websocket \r\n */\r\n\r\nlet Global = require(\"common\")\r\n\r\n//心跳检测\r\nvar HeartCheck = {\r\n    timeout: 1000, //60秒\r\n    timeoutObj: null,\r\n    serverTimeoutObj: null,\r\n    disconnectioned: false,\r\n    reconnectTimeoutobj: null,\r\n    state: null,    //websocket state\r\n\r\n    reset: function() {\r\n        clearTimeout(this.timeoutObj);\r\n        clearTimeout(this.serverTimeoutObj);\r\n        return this;\r\n    },\r\n\r\n    startHeartBeat: function() {\r\n        var self = this;\r\n        this.timeoutObj = setTimeout(function() {\r\n            //这里发送一个心跳，后端收到后，返回一个心跳消息，onmessage拿到返回的心跳就说明连接正常\r\n            cc.log(\"send heart beat...\")\r\n            if (Global.ws == null) {\r\n                return\r\n            } \r\n\r\n            var buff = new ArrayBuffer(12)\r\n            var data = new Uint32Array(buff)\r\n    \r\n            data[0] = Global.MID_HeartBeat //消息ID\r\n            data[1] = 1 //消息长度\r\n            data[2] = 0 //anything 随意填充一个数\r\n\r\n            Global.ws.send(data);\r\n            self.serverTimeoutObj = setTimeout(function() { //心跳超时主动断开\r\n                cc.log(\"close connection...\")\r\n                if (Global.ws == null) {\r\n                    return\r\n                } \r\n                Global.ws.close();\r\n                self.disconnectioned = true\r\n            }, self.timeout)\r\n        }, this.timeout)\r\n    },\r\n\r\n    startCheckStopHeartBeat: function(){\r\n\r\n    },\r\n\r\n    hasDisconnected: function(){\r\n        return this.disconnectioned\r\n    },\r\n\r\n    stopReconnectTimer: function(){\r\n        cc.log(\"close reconnectTimeout...\")\r\n        clearTimeout(this.reconnectTimeoutobj);\r\n    }\r\n}\r\n\r\ncc.Class({\r\n    //extends: cc.Component,\r\n\r\n    /*\r\n    readyState:\r\n        CONNECTING 0\r\n        OPEN       1\r\n        CLOSING    2\r\n        CLOSED     3\r\n    */\r\n   \r\n    CanSendMsg: function(){\r\n        if (Global.ws == null){\r\n            return false\r\n        }\r\n\r\n        return (Global.ws.readyState == WebSocket.CONNECTING || Global.ws.readyState == WebSocket.OPEN)\r\n    }, \r\n\r\n    swConnect: function(){\r\n        if (Global.ws != null) {\r\n            //return\r\n            cc.log(\"readyState: \", Global.ws.readyState)\r\n            if (Global.ws.readyState == WebSocket.CONNECTING || Global.ws.readyState == WebSocket.OPEN) { //已经连上就不必再连\r\n                return\r\n            }\r\n        }\r\n\r\n        var self = this;\r\n        cc.log(\"addr: \", Global.wsAddr, Global.ws == null)\r\n        var ws = new WebSocket(Global.wsAddr);\r\n        ws.onopen = function(e) {\r\n            cc.log(\"ws open: \", ws.readyState)\r\n            //发送心跳\r\n            HeartCheck.reset().startHeartBeat()\r\n        }\r\n\r\n        ws.onmessage = function(e) {\r\n            /**\r\n             * 消息解析 \r\n             * 0: 消息id\r\n             * 1：消息长度\r\n             * 2：sessionid\r\n             * 3：nodex x坐标正负标记\r\n             * 4：nodex x坐标值\r\n             * 5：nodey y坐标正负标记\r\n             * 6：nodey y坐标值 \r\n             */\r\n\r\n            var data = new Uint32Array(e.data)\r\n            var msgid = data[0] \r\n            switch (msgid) {\r\n                case Global.MID_login:\r\n                    cc.log(\"ws message MID_login: \", data[1], data[2], data[3], data[4], data[5], data[6])\r\n                    var key = data[2].toString()\r\n                    var nodex = data[4]\r\n                    var nodey = data[6]\r\n                    if (data[3] == 2){\r\n                        nodex = 0 - nodex\r\n                    }\r\n                    if (data[5] == 2){\r\n                        nodey = 0 - nodey\r\n                    }\r\n                    var playerProp = {\r\n                        sessionId: data[2],\r\n                        nodex: nodex,\r\n                        nodey: nodey\r\n                    }\r\n                    if (Global.PlayerSessionMap.has(key) == false) {\r\n                        Global.PlayerSessionMap.set(key, playerProp)\r\n                    }\r\n                    Global.NewplayerMap.set(key, playerProp)\r\n                    Global.newPlayerIds.push(key)\r\n                    \r\n                    break;\r\n                case Global.MID_logout:\r\n                    var key = data[2].toString()\r\n                    cc.log(\"ws message MID_logout, sessionid: \", key)\r\n                    Global.DelPlayerIds.push(key)\r\n                    Global.PlayerSessionMap.delete(key)\r\n                    break;\r\n                case Global.MID_move:\r\n                    cc.log(\"ws message MID_move: \", data[1], data[2], data[3], data[4], data[5], data[6])\r\n                    var key = data[2].toString()\r\n                    var nodex = data[4]\r\n                    var nodey = data[6]\r\n                    if (data[3] == 2){\r\n                        nodex = 0 - nodex\r\n                    }\r\n                    if (data[5] == 2){\r\n                        nodey = 0 - nodey\r\n                    }\r\n                    var playerProp = {\r\n                        sessionId: data[2],\r\n                        nodex: nodex,\r\n                        nodey: nodey\r\n                    }\r\n                    if (Global.PlayerSessionMap.has(key) == false) {\r\n                        Global.PlayerSessionMap.set(key, playerProp)\r\n                    }\r\n                    Global.NewplayerMap.set(key, playerProp)\r\n                    Global.newPlayerIds.push(key)\r\n                    cc.log(\"MID_move purple monsters: \", Global.newPlayerIds.length)\r\n                    break;\r\n                case Global.MID_Bump:\r\n                    //cc.log(\"ws message MID_Bump: \", data[1], data[2], data[3], data[4], data[5], data[6])\r\n                    /**\r\n                     *  0: 消息ID\r\n                        1：消息长度\r\n                        2: 成功失败标志 (失败则只需要前三个字段)\r\n                        3: 星星x坐标正负标志\r\n                        4: 星星x坐标\r\n                        5：星星y坐标正负标志\r\n                        6：星星y坐标\r\n                     */\r\n\r\n                    if (data[2] == 0){ //失败\r\n                        cc.log(\"ws message MID_Bump fail ... \")\r\n                        break\r\n                    }\r\n                    \r\n                    var nodex = data[4]\r\n                    var nodey = data[6]\r\n                    if (data[3] == 2){\r\n                        nodex = 0 - nodex\r\n                    }\r\n                    if (data[5] == 2){\r\n                        nodey = 0 - nodey\r\n                    }\r\n                    var starProp = {\r\n                        nodex: nodex,\r\n                        nodey: nodey\r\n                    }\r\n                    Global.newStarPos.set(Global.newStarKey, starProp)\r\n                    break\r\n                case Global.MID_HeartBeat:\r\n                    cc.log(\"ws message MID_HeartBeat: \", msgid)\r\n                    break\r\n                default:\r\n                    cc.log(\"未知 消息id: \", msgid)\r\n            }\r\n\r\n            //发送心跳\r\n            HeartCheck.reset().startHeartBeat()\r\n        }\r\n\r\n        ws.onerror = function (e) {\r\n            cc.log(\"ws error: \", ws.readyState)\r\n            //Global.ws = null\r\n            if (HeartCheck.hasDisconnected() == false) {\r\n                HeartCheck.stopReconnectTimer()\r\n                HeartCheck.reconnectTimeoutobj = setTimeout(function() {\r\n                    self.swConnect();\r\n                }, 1000)\r\n            }else{\r\n                HeartCheck.stopReconnectTimer()\r\n            }\r\n        }\r\n\r\n        ws.onclose = function (e) {\r\n            cc.log(\"ws close: \", ws.readyState)\r\n            //Global.ws = null\r\n            if (HeartCheck.hasDisconnected() == false) {\r\n                HeartCheck.stopReconnectTimer()\r\n                HeartCheck.reconnectTimeoutobj = setTimeout(function() {\r\n                    self.swConnect();\r\n                }, 1000)\r\n            }else{\r\n                HeartCheck.stopReconnectTimer()\r\n            }\r\n        }\r\n\r\n        cc.log(\"global ws init, state: \", ws.readyState)\r\n        Global.ws = ws\r\n    },\r\n\r\n    /**\r\n     * \r\n     * @param {*} data  具体数据, 1：长度，2：是否广播，3：... 具体消息数据\r\n     */\r\n    sendwsmessage: function(data){\r\n        \r\n        if (Global.ws == null) {\r\n            return\r\n        }\r\n\r\n        if (Global.ws != null) {\r\n            if (Global.ws.readyState == WebSocket.CLOSED || Global.ws.readyState == WebSocket.CLOSING) { //正在断开或者已经断开，则不能发送消息\r\n                return\r\n            }\r\n        }\r\n\r\n        //cc.log(\"ws sendwsmessage: \", Global.ws.readyState)\r\n        Global.ws.send(data)\r\n    }\r\n})"]}