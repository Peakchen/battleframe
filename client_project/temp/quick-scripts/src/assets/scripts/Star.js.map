{"version":3,"sources":["assets\\scripts\\Star.js"],"names":["Battle","require","wsNet","Global","cc","Class","Component","properties","pickRadius","getBattleObj","getwsNetObj","getPlayerDistance","playerPos","game","player","getPosition","dist","node","position","sub","mag","getAnyPlayerDistance","onPicked","Bumped","nodex","newStarPos","nodey","spawnNewStar","gainScore","destroy","sendBumpMsg","buff","ArrayBuffer","data","Uint32Array","playerX","x","playerXflag","playerY","y","playerYflag","parseInt","starPos","starX","starXflag","starY","starYflag","log","sendwsmessage","update","dt","frame","postAttackMsg","has","newStarKey"],"mappings":"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","sourceRoot":"/","sourcesContent":["let Battle = require(\"battle\")\nlet wsNet = require(\"wsNet\")\nlet Global = require(\"common\")\ncc.Class({\n    extends: cc.Component,\n    \n    properties: {\n        // 星星和主角之间的距离小于这个数值时，就会完成收集\n        pickRadius: 0,\n    },\n\n    getBattleObj: function() {\n        return new Battle();\n    },\n\n    getwsNetObj: function() {\n        return new wsNet();\n    },\n\n    getPlayerDistance: function () {\n        // 根据 player 节点位置判断距离\n        var playerPos = this.game.player.getPosition();\n        // 根据两点位置计算两点之间距离\n        var dist = this.node.position.sub(playerPos).mag();\n        return dist;\n    },\n\n    getAnyPlayerDistance: function(){\n\n    },\n\n    onPicked: function() {\n        //碰撞后发送一个消息\n        // var buff = new ArrayBuffer(12)\n        // var data = new Uint32Array(buff)\n        // data[0] = 4\n        // data[1] = 1 //单纯给服务器发消息\n        // for (var i = 2; i <= data.length-1; i++) {\n        //     data[i] = i + 1\n        // }\n\n        Global.Bumped = 1\n        // this.getwsNetObj().sendwsmessage(data)\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        var nodex = Global.newStarPos.nodex\n        var nodey = Global.newStarPos.nodey\n        this.game.spawnNewStar(nodex, nodey);\n        // 调用 Game 脚本的得分方法\n        this.game.gainScore();\n        // 然后销毁当前星星节点\n        this.node.destroy();\n    },\n\n    /*\n\t撞击响应\n\t请求消息结构：\n\t\t0: 消息ID\n\t\t1：消息长度 8\n\t\t2: 小球x坐标正负标志\n\t\t3: 小球x坐标\n\t\t4：小球y坐标正负标志\n\t\t5：小球y坐标\n\t\t6: 星星x坐标正负标志\n\t\t7: 星星x坐标\n\t\t8：星星y坐标正负标志\n        9：星星y坐标\n    */\n    sendBumpMsg: function(){\n        var buff = new ArrayBuffer(40)\n        var data = new Uint32Array(buff)\n\n        data[0] = 4 //消息ID\n        data[1] = 8 //消息长度\n\n        //小球信息\n        var playerPos = this.game.player.getPosition();\n        var playerX = playerPos.x;\n        var playerXflag = 1\n        if (playerX < 0.0) {\n            playerXflag = 2\n            playerX = 0.0 - playerX\n        }\n\n        var playerY = playerPos.y;\n        var playerYflag = 1\n        if (playerY < 0.0) {\n            playerYflag = 2\n            playerY = 0.0 - playerY\n        }\n\n        data[2] = playerXflag\n        data[3] = parseInt(playerX)\n        data[4] = playerYflag\n        data[5] = parseInt(playerY)\n\n        //星星信息\n        var starPos = this.node.getPosition();\n        var starX = starPos.x;\n        var starXflag = 1\n        if (starX < 0.0) {\n            starXflag = 2\n            starX = 0.0 - starX\n        }\n\n        var starY = starPos.y;\n        var starYflag = 1\n        if (starY < 0.0) {\n            starYflag = 2\n            starY = 0.0 - starY\n        }\n\n        data[6] = starXflag\n        data[7] = parseInt(starX)\n        data[8] = starYflag\n        data[9] = parseInt(starY)\n\n        cc.log(\"bump star: \", data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9])\n        this.getwsNetObj().sendwsmessage(data)\n    },\n\n    update: function (dt) {\n        //cc.log(\"star dt: \", dt)\n        // 每帧判断和主角之间的距离是否小于收集距离\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // 调用收集行为\n            if (dt <= 1.0) {\n                dt *= 100.0\n            }\n            var frame = parseInt(dt)\n            var dist = parseInt(this.getPlayerDistance())\n            // 发送撞击星星事件\n            this.getBattleObj().postAttackMsg(frame, dist);\n            //cc.log(\"star info: \", dt, frame, dist)\n            this.sendBumpMsg()\n            return;\n        }\n\n        if (Global.newStarPos.has(Global.newStarKey)){\n            this.onPicked();\n        }\n        \n        // 根据 Game 脚本中的计时器更新星星的透明度\n        //var opacityRatio = 1 - this.game.timer/this.game.starDuration;\n        //var minOpacity = 50;\n        //this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    },\n});\n"]}