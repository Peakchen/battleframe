{"version":3,"sources":["assets\\scripts\\Player.js"],"names":["cc","Class","Component","properties","jumpHeight","jumpDuration","maxMoveSpeed","accel","jumpAudio","type","AudioClip","setJumpAction","jumpUp","moveBy","v2","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","audioEngine","playEffect","onKeyDown","event","keyCode","macro","KEY","a","accLeft","d","accRight","onKeyUp","onLoad","game","setFrameRate","xSpeed","systemEvent","on","SystemEvent","EventType","KEY_DOWN","KEY_UP","onDestroy","off","update","dt","Math","abs","node","x"],"mappings":"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","sourceRoot":"/","sourcesContent":["cc.Class({\n    extends: cc.Component,\n    \n    properties: {\n        // 主角跳跃高度\n        jumpHeight: 0,\n        // 主角跳跃持续时间\n        jumpDuration: 0,\n        // 最大移动速度\n        maxMoveSpeed: 0,\n        // 加速度\n        accel: 0,\n        // 跳跃音效资源\n        jumpAudio: {\n            default: null,\n            type: cc.AudioClip\n        },\n    },\n\n    setJumpAction: function () {\n        // 跳跃上升\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.v2(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // 下落\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.v2(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        // 添加一个回调函数，用于在动作结束时调用我们定义的其他方法\n        var callback = cc.callFunc(this.playJumpSound, this);\n        // 不断重复，而且每次完成落地动作后调用回调来播放声音\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\n    },\n\n    playJumpSound: function () {\n        // 调用声音引擎播放声音\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    },\n\n    onKeyDown (event) {\n        // set a flag when key pressed\n        switch(event.keyCode) {\n            case cc.macro.KEY.a:\n                this.accLeft = true;\n                break;\n            case cc.macro.KEY.d:\n                this.accRight = true;\n                break;\n        }\n    },\n\n    onKeyUp (event) {\n        // unset a flag when key released\n        switch(event.keyCode) {\n            case cc.macro.KEY.a:\n                this.accLeft = false;\n                break;\n            case cc.macro.KEY.d:\n                this.accRight = false;\n                break;\n        }\n    },\n\n    onLoad: function() {\n        cc.game.setFrameRate(100);\n        // 初始化跳跃动作\n        //this.jumpAction = this.setJumpAction();\n        //this.node.runAction(this.jumpAction);\n\n        // 加速度方向开关\n        this.accLeft = false;\n        this.accRight = false;\n        // 主角当前水平方向速度\n        this.xSpeed = 0;\n\n        // 初始化键盘输入监听\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);    \n    },\n\n    onDestroy () {\n        // 取消键盘输入监听\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n    },    \n\n    update: function (dt) {\n        //cc.log(\"player dt: \", dt,this.maxMoveSpeed)\n        // 根据当前加速度方向每帧更新速度\n\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // 限制主角的速度不能超过最大值\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed ) {\n            // if speed reach limit, use max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // 根据当前速度更新主角的位置\n        this.node.x += this.xSpeed * dt;\n        //cc.log(\"player pos: \", this.node.x, this.node.y)\n    },\n});\n\n\n"]}