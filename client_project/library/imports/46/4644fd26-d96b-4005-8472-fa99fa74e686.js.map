{"version":3,"sources":["assets\\scripts\\Star.js"],"names":["Battle","require","wsNet","cc","Class","Component","properties","pickRadius","getBattleObj","getwsNetObj","getPlayerDistance","playerPos","game","player","getPosition","dist","node","position","sub","mag","onPicked","frame","buff","ArrayBuffer","data","Uint16Array","i","length","sendwsmessage","postAttackMsg","spawnNewStar","gainScore","destroy","update","dt","parseInt","log","opacityRatio","timer","starDuration","minOpacity","opacity","Math","floor"],"mappings":";;;;;;AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AAEAE,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AACR;AACAC,IAAAA,UAAU,EAAE;AAFJ,GAHP;AAQLC,EAAAA,YAAY,EAAE,wBAAW;AACrB,WAAO,IAAIR,MAAJ,EAAP;AACH,GAVI;AAYLS,EAAAA,WAAW,EAAE,uBAAW;AACpB,WAAO,IAAIP,KAAJ,EAAP;AACH,GAdI;AAgBLQ,EAAAA,iBAAiB,EAAE,6BAAY;AAC3B;AACA,QAAIC,SAAS,GAAG,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,WAAjB,EAAhB,CAF2B,CAG3B;;AACA,QAAIC,IAAI,GAAG,KAAKC,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAuBP,SAAvB,EAAkCQ,GAAlC,EAAX;AACA,WAAOJ,IAAP;AACH,GAtBI;AAwBLK,EAAAA,QAAQ,EAAE,kBAASC,KAAT,EAAgBN,IAAhB,EAAsB;AAC5B;AACA,QAAIO,IAAI,GAAG,IAAIC,WAAJ,CAAgB,EAAhB,CAAX;AACA,QAAIC,IAAI,GAAG,IAAIC,WAAJ,CAAgBH,IAAhB,CAAX;AACAE,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIF,IAAI,CAACG,MAAL,GAAY,CAAjC,EAAoCD,CAAC,EAArC,EAAyC;AACrCF,MAAAA,IAAI,CAACE,CAAD,CAAJ,GAAUA,CAAC,GAAG,CAAd;AACH;;AACD,SAAKjB,WAAL,GAAmBmB,aAAnB,CAAiCJ,IAAjC,EAR4B,CAU5B;;AACA,SAAKhB,YAAL,GAAoBqB,aAApB,CAAkCR,KAAlC,EAAyCN,IAAzC,EAX4B,CAY5B;;AACA,SAAKH,IAAL,CAAUkB,YAAV,GAb4B,CAc5B;;AACA,SAAKlB,IAAL,CAAUmB,SAAV,GAf4B,CAgB5B;;AACA,SAAKf,IAAL,CAAUgB,OAAV;AACH,GA1CI;AA4CLC,EAAAA,MAAM,EAAE,gBAAUC,EAAV,EAAc;AAClB;AACA;AACA,QAAI,KAAKxB,iBAAL,KAA2B,KAAKH,UAApC,EAAgD;AAC5C;AACA,UAAI2B,EAAE,IAAI,GAAV,EAAe;AACXA,QAAAA,EAAE,IAAI,KAAN;AACH;;AACD,UAAIb,KAAK,GAAGc,QAAQ,CAACD,EAAD,CAApB;AACA,UAAInB,IAAI,GAAGoB,QAAQ,CAAC,KAAKzB,iBAAL,EAAD,CAAnB;AACAP,MAAAA,EAAE,CAACiC,GAAH,CAAO,aAAP,EAAsBF,EAAtB,EAA0Bb,KAA1B,EAAiCN,IAAjC;AACA,WAAKK,QAAL,CAAcC,KAAd,EAAqBN,IAArB;AACA;AACH,KAbiB,CAelB;;;AACA,QAAIsB,YAAY,GAAG,IAAI,KAAKzB,IAAL,CAAU0B,KAAV,GAAgB,KAAK1B,IAAL,CAAU2B,YAAjD;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,SAAKxB,IAAL,CAAUyB,OAAV,GAAoBD,UAAU,GAAGE,IAAI,CAACC,KAAL,CAAWN,YAAY,IAAI,MAAMG,UAAV,CAAvB,CAAjC;AACH;AA/DI,CAAT","sourceRoot":"/","sourcesContent":["let Battle = require(\"battle\")\nlet wsNet = require(\"wsNet\")\n\ncc.Class({\n    extends: cc.Component,\n    \n    properties: {\n        // 星星和主角之间的距离小于这个数值时，就会完成收集\n        pickRadius: 0,\n    },\n\n    getBattleObj: function() {\n        return new Battle();\n    },\n\n    getwsNetObj: function() {\n        return new wsNet();\n    },\n\n    getPlayerDistance: function () {\n        // 根据 player 节点位置判断距离\n        var playerPos = this.game.player.getPosition();\n        // 根据两点位置计算两点之间距离\n        var dist = this.node.position.sub(playerPos).mag();\n        return dist;\n    },\n\n    onPicked: function(frame, dist) {\n        //碰撞后发送一个消息\n        var buff = new ArrayBuffer(10)\n        var data = new Uint16Array(buff)\n        data[0] = 4\n        for (var i = 1; i <= data.length-1; i++) {\n            data[i] = i + 1\n        }\n        this.getwsNetObj().sendwsmessage(data)\n\n        // 发送撞击星星事件\n        this.getBattleObj().postAttackMsg(frame, dist);\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n        // 调用 Game 脚本的得分方法\n        this.game.gainScore();\n        // 然后销毁当前星星节点\n        this.node.destroy();\n    },\n\n    update: function (dt) {\n        //cc.log(\"star dt: \", dt)\n        // 每帧判断和主角之间的距离是否小于收集距离\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // 调用收集行为\n            if (dt <= 1.0) {\n                dt *= 100.0\n            }\n            var frame = parseInt(dt)\n            var dist = parseInt(this.getPlayerDistance())\n            cc.log(\"star info: \", dt, frame, dist)\n            this.onPicked(frame, dist);\n            return;\n        }\n        \n        // 根据 Game 脚本中的计时器更新星星的透明度\n        var opacityRatio = 1 - this.game.timer/this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    },\n});\n"]}